// byte stuff

def impure inline clear()      [C]   -> [C]   { [-]                 }

def impure inline popc()       [C]   -> []    { clear <             }
def impure inline popi()       [I]   -> []    { popc popc popc popc }

def        inline dupc()       [C]   -> [C,C] { dupc1               }
def        inline dupi()       [I]   -> [I,I] { dupi1               }

def        inline swapc()      [C,C] -> [C,C] { rollc2(1)           }
def        inline swapi()      [I,I] -> [I,I] { rolli2(1)           }

def impure inline c_to_b()     [C]   -> [B]   { [>+<[-]] >[-<+>]< }
def impure inline c_to_i()     [C]   -> [I]   { >>> rollc4(3)     }
def impure inline b_to_c()     [B]   -> [C]   {                   }
def impure inline b_to_i()     [B]   -> [I]   { c_to_i            }

def impure inline push_true()  []    -> [B]   { >+ }
def impure inline push_false() []    -> [B]   { >  }

def impure inline not()        [B]   -> [B]   { [>+<[-]]+>[-<->]< }

def impure inline ltc()        [C,C] -> [B]   { [<[->>+>+<<<]>>>[-<<<+>>>]< not [-<[-]+<+>>]<<->-]< c_to_b }
def        inline gtc()        [C,C] -> [B]   { swapc ltc   }
def        inline lec()        [C,C] -> [B]   { gtc not     }
def        inline gec()        [C,C] -> [B]   { ltc not     }

def impure inline addc()       [C,C] -> [C]   { [-<+>]<         }
def impure inline subc()       [C,C] -> [C]   { <[->-<]>[-<+>]< }
def impure inline mulc()       [C,C] -> [C]   { <[->>+<<]>[->[->+<]>[-<+<<+>>>]<<]>[-]<< }
def impure        divc()       [C,C] -> [C]   { > rollc3(1) dupc2 gec [-<<<+>[->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec] < popc popc  }
def impure        modc()       [C,C] -> [C]   {             dupc2 gec [-<<   [->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec]<<[-]>[-<+>]< }
def impure        divmodc()    [C,C] -> [C,C] { > rollc3(1) dupc2 gec [-<<<+>[->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec]<<[-]>[-<+>]< }

def impure inline i_to_b()     [I]   -> [B]   { c_to_b mulc c_to_b mulc c_to_b mulc c_to_b }
def impure inline i_to_c()     [I]   -> [C]   { rollc4(1) popc popc popc }

def        inline nec()        [C,C] -> [B]   { subc c_to_b }
def        inline eqc()        [C,C] -> [B]   { nec not     }

def impure inline and()        [B,B] -> [B]   { mulc c_to_b }
def impure inline or()         [B,B] -> [B]   { addc c_to_b }
def impure inline xor()        [B,B] -> [B]   { nec         }

def        inline eqc_(C x)    [C]   -> [C,B] { dupc pushc(x) eqc }
def        inline nec_(C x)    [C]   -> [C,B] { dupc pushc(x) nec }
def        inline gtc_(C x)    [C]   -> [C,B] { dupc pushc(x) ltc }
def        inline lec_(C x)    [C]   -> [C,B] { dupc pushc(x) gec }
def        inline gec_(C x)    [C]   -> [C,B] { dupc pushc(x) lec }
def        inline ltc_(C x)    [C]   -> [C,B] { dupc pushc(x) gtc }



// int math

def impure addi() [I,I] -> [I] {
  <<<<[->>>>>>+                        <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+ dupc not [-<<+>>] popc <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+ dupc not [-<<+>>] popc <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+                        <<<<<<]>>>>[->>+                        <<]>>[-<<<<<<+>>>>>>]<<<
}

def impure subi() [I,I] -> [I] {
  [->>+<<]<<<<[->>>>>> dupc not [-<<<<<<<<+>>>>>>>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<
  [->>+<<]<<<<[->>>>>> dupc not [-<<<<<<<<+>>>>>>>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<
  [->>+<<]<<<<[->>>>>> dupc not [-<<<<<<<<+>>>>>>>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<
  [->>+<<]<<<<[->>>>>>                                    -<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<
}

def impure muli() [I,I] -> [I] {
  >>>>
  rollcn(12,7) dupc pushc(127) ltc
  [->>>>+<<<<< dec(128) >] popc
  rollcn(12,4) dupc pushc(127) ltc
  [->>>>+<<<<< dec(128) >] popc
  rollcn(12,5)
  >>>>>- not [-<<<<< <<<<<<<<<<< set(128) >>>>>>>>>>> >>>>>] <<<<<
  dupi i_to_b [
  clear >>>+ swapi subi
  rollcn(12,4) dupi rollcn(12,4) addi swapi rollcn(12,8)
  dupi i_to_b ] popc
  popi popi
}


def inline nei() [I,I] -> [B] { subi i_to_b }
def inline eqi() [I,I] -> [B] { nei not     }



// printing

def impure inline printc_chr() [C] -> [C] { . }
def        inline endl()                  { prints("\n") }


def inline _print_digit() [C] -> [C] { dupc inc('0') printc_chr popc }
def inline _out_digit() [C] -> [C] { inc('0') printc_chr clear }

def impure inline _cleanp() {
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
}

def impure inline _cleann() {
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
}

def impure _ploop3() [C,C,C] -> [] {
  <<[_out_digit > _out_digit <] > [_out_digit] > _out_digit <<<
}

def printc_ord() [C] -> [C] {
  dupc dupc dupc
  pushc(100) swapc divc rollc3(1)
  pushc(100) swapc modc
  pushc( 10) swapc divc swapc
  pushc( 10) swapc modc
  _ploop3
}

def impure printi() [I] -> [I] {
  dupi rollc4(3) dupc rollc5(1)
  pushc(127) ltc inc(1)
  if (eqc_(2)) {
    prints("-") clear
    <<<< dec(128) >>>>
           >>>>++>+>++++>+++++++>   ++++>++++++++>    +++>++++++> ++++>++++++++             <<<<<<<<<<<<<
    <[-   >>>>>  > >    >       >       >        >       >      >     >       - _cleann    <<<<<<<<<<<<<<]
    <[-  >>>>>>  > >    >       >       >        >       >    -->----->  ------ _cleann   <<<<<<<<<<<<<<<]
    <[- >>>>>>>  > >    >       >       >  ------>  -----> ----->  --->  ------ _cleann  <<<<<<<<<<<<<<<<]
    <[->>>>>>>>  > >   -> ------>-------> ------->------->    -->    ->  ------ _cleann <<<<<<<<<<<<<<<<<]
    >>>>
  }
  if (eqc_(1)) {
    clear
    <[-   >>>>>>> >      >       >       >       >     >     >     + _cleanp    <<<<<<<<<<<<<<]
    <[-  >>>>>>>> >      >       >       >       >   ++>+++++>++++++ _cleanp   <<<<<<<<<<<<<<<]
    <[- >>>>>>>>> >      >       > ++++++>  +++++>+++++>  +++>++++++ _cleanp  <<<<<<<<<<<<<<<<]
    <[->>>>>>>>>>+>++++++>+++++++>+++++++>+++++++>   ++>    +>++++++ _cleanp <<<<<<<<<<<<<<<<<]
    >>>>
  }
  >>>
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit <<<]
  >[_out_digit > _out_digit > _out_digit <<]
  >[_out_digit > _out_digit <]
  >[_out_digit]
  > _out_digit
  <<<<<<<<<<
  popc popc popc popc
  popi
}
