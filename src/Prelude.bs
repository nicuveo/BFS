/* BFS Prelude

A set of basic functions, implicitly available to every BFS program.

By convention, most functions that exist on different types will use be
differentiated using a 'c' suffix for characters, a 'b' suffix for booleans, and
a 'i' suffix for 32-bit integers. See for instance `popc`, `popb`, and
`popi`. Some binary functions have a variant that takes the second value as a
compile-time argument, in which case the name is suffixed by '_'.

Most functions freely use space on the right of the top of the stack as
temporary space. All functions who do so will clear that temporary space before
returning. When relevant, function comments will indicate the maximum amount of
temporary space used in the format "(trash n)".

All internal functions not meant for external use have a name that starts with
'_'. At time of writing BFS doesn't offer a mechanism to differentiate between
public and private functions.

*/


////////////////////////////////////////////////////////////////////////////////
// conversions between types

// Converts the current character to a boolean (trash 1).
// A zero will be left unchanged, any non-zero value will be changed to a one.
def impure inline c_to_b() [C] -> [B] {
  [>+<[-]] >[-<+>]<
}

// Converts the current character to an int32 (trash 0).
// The character becomes the lowest byte.
def impure inline c_to_i() [C] -> [I] {
  [>>>+<<<-]>>>
}

// Converts the current boolean to a character (trash 0).
// This function is a no-op, only here to appease the type-checker.
def impure inline b_to_c() [B] -> [C] {
}

// Converts the current boolean to an integer (trash 0).
// The character becomes the lowest byte.
def inline b_to_i() [B] -> [I] {
  b_to_c c_to_i
}

// Converts the current character to a boolean (trash 1).
// A zero will be left unchanged, any non-zero value will be changed to a one.
def impure inline i_to_b() [I] -> [B] {
  [[-]>+<]<
  [[-]>>+<<]<
  [[-]>>>+<<<]<
  [[-]>>>>+<<<<]
  >>>>[[-]<<<<+>>>>]<<<<
}

// Converts the current int32 into a character (trash 0).
// This only keeps the lowest byte of the int.
def impure inline i_to_c() [I]-> [C] {
  <[-]<[-]<[-]>>>[-<<<+>>>]<<<
}


////////////////////////////////////////////////////////////////////////////////
// basic stack manipulation

// Sets the current byte to zero (trash 0).
def impure inline clear() [C] -> [C] {
  [-]
}

// Pops one character from the stack (trash 0).
def impure inline popc() [C] -> [] {
  clear <
}

// Pops one boolean from the stack (trash 0).
def impure inline popb() [B] -> [] {
  popc
}

// Pops one int32 from the stack (trash 0).
def impure inline popi() [I] -> [] {
  popc popc popc popc
}

// Duplicates the current character (trash 1).
// Simple alias for the built-in "dupc1".
def inline dupc() [C] -> [C,C] {
  dupc1
}

// Duplicates the current integer (trash 1).
// Simple alias for the built-in "dupi1".
def inline dupi() [I] -> [I,I] {
  dupi1
}

// Duplicates the current boolean (trash 1).
def inline impure dupb() [B] -> [B,B] {
  dupc1
}

// Swap the two characters at the top of the stack (trash 1?).
// Convenient alias for a built-in roll.
def inline swapc() [C,C] -> [C,C] {
  rollc2(1)
}

// Swap the two integers at the top of the stack (trash 1?).
// Convenient alias for a built-in roll.
def inline swapi() [I,I] -> [I,I] {
  rolli2(1)
}

// Swap the two booleans at the top of the stack (trash 1?).
def impure inline swapb() [B] -> [B,B] {
  rollc2(1)
}


////////////////////////////////////////////////////////////////////////////////
// boolean operations

// Negates the current boolean (trash 1).
def impure inline not() [B] -> [B] {
  [>+<[-]]+>[-<->]<
}

// Perform a logic "and" on the top two booleans (trash 2).
def impure inline and() [B,B] -> [B] {
  mulc c_to_b
}

// Perform a logic "or" on the top two booleans (trash 2).
def impure inline or() [B,B] -> [B] {
  addc c_to_b
}

// Perform a logic "xor" on the top two booleans (trash 2).
def impure inline xor() [B,B] -> [B] {
  nec
}


////////////////////////////////////////////////////////////////////////////////
// char comparison

// Returns true if the two top characters are the same (trash 1).
def inline eqc() [C,C] -> [B] {
  nec not
}

// Returns true if the two top characters are different (trash 1).
def inline nec() [C,C] -> [B] {
  subc c_to_b
}

// Similar to `eqc`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline eqc_(C x) [C] -> [C,B] {
  dupc pushc(x) eqc
}

// Similar to `nec`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline nec_(C x) [C] -> [C,B] {
  dupc pushc(x) nec
}

// Consumes both characters at the top of the stack, and pushes a
// boolean that indicates whtehr the character at the top of the stack
// is strictly smaller than the previous one (trash 2).
def impure inline ltc() [C,C] -> [B] {
  [<[->>+>+<<<]>>>[-<<<+>>>]< not [-<[-]+<+>>]<<->-]< c_to_b
}

// Consumes both characters at the top of the stack, and pushes a
// boolean that indicates whtehr the character at the top of the stack
// is strictly greater than the previous one (trash 2).
def inline gtc() [C,C] -> [B] {
  swapc ltc
}

// Consumes both characters at the top of the stack, and pushes a
// boolean that indicates whtehr the character at the top of the stack
// is smaller or equal or the previous one (trash 2).
def inline lec() [C,C] -> [B] {
  gtc not
}

// Consumes both characters at the top of the stack, and pushes a
// boolean that indicates whtehr the character at the top of the stack
// is greater or equal to the previous one (trash 2).
def inline gec() [C,C] -> [B] {
  ltc not
}

// Similar to `gtc`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline gtc_(C x) [C] -> [C,B] {
  dupc pushc(x) ltc
}

// Similar to `lec`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline lec_(C x) [C] -> [C,B] {
  dupc pushc(x) gec
}

// Similar to `gec`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline gec_(C x) [C] -> [C,B] {
  dupc pushc(x) lec
}

// Similar to `ltc`, but compares the current value on the stack with the
// provided argument (trash 1).
// This function leaves the existing character unmodified.
def inline ltc_(C x) [C] -> [C,B] {
  dupc pushc(x) gtc
}


////////////////////////////////////////////////////////////////////////////////
// char arithmetic

def impure inline addc()       [C,C] -> [C]   { [-<+>]<         }
def impure inline subc()       [C,C] -> [C]   { <[->-<]>[-<+>]< }
def impure inline mulc()       [C,C] -> [C]   { <[->>+<<]>[->[->+<]>[-<+<<+>>>]<<]>[-]<< }
def impure        divc()       [C,C] -> [C]   { > rollc3(1) dupc2 gec [-<<<+>[->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec] < popc popc  }
def impure        modc()       [C,C] -> [C]   {             dupc2 gec [-<<   [->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec]<<[-]>[-<+>]< }
def impure        divmodc()    [C,C] -> [C,C] { > rollc3(1) dupc2 gec [-<<<+>[->>+>+<<<]>>>[-<<<+>>>]<[-<->]< dupc2 gec]<<[-]>[-<+>]< }


////////////////////////////////////////////////////////////////////////////////
// int comparison

def inline eqi() [I,I] -> [B] { nei not     }
def inline nei() [I,I] -> [B] { subi i_to_b }

def inline eqi_(I x) [I] -> [I,B] { dupi pushi(x) eqi }
def inline nei_(I x) [I] -> [I,B] { dupi pushi(x) nei }

/*
def impure inline lti() [I,I] -> [B] {
  // start with highest byte
  <<<<<<<
  // [<A1>, A2, A3, A4, B1, B2, B3, B4]
  [->>>>>>>>+>+<<<<<<<<<]
  >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]<<<<<
  // [A1, A2, A3, A4, <B1>, B2, B3, B4, A1, 0]
  [->>>>>+>+<<<<<<]
  >>>>>>[-<<<<<<+>>>>>>]<
  // [A1, A2, A3, A4, B1, B2, B3, B4, A1, <B1>, 0]
}

def inline gti() [I,I] -> [B] { swapc lti }
def inline lei() [I,I] -> [B] { gti not   }
def inline gei() [I,I] -> [B] { lti not   }

def inline gti_(I x) [I] -> [I,B] { dupi pushi(x) lti }
def inline lei_(I x) [I] -> [I,B] { dupi pushi(x) gei }
def inline gei_(I x) [I] -> [I,B] { dupi pushi(x) lei }
def inline lti_(I x) [I] -> [I,B] { dupi pushi(x) gti }
*/


////////////////////////////////////////////////////////////////////////////////
// int arithmetic

def impure addi() [I,I] -> [I] {
  <<<<[->>>>>>+                        <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+ dupc not [-<<+>>] popc <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+ dupc not [-<<+>>] popc <<<<<<]>>>>[->>+ dupc not [-<<+>>] popc <<]>>[-<<<<<<+>>>>>>]<<<
  <<<<[->>>>>>+                        <<<<<<]>>>>[->>+                        <<]>>[-<<<<<<+>>>>>>]<<<
}

def impure subi() [I,I] -> [I] {
  [->>+                        <<]<<<<[->>>>>> dupc not [-<<+>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>] <[>+<-]>[-<-<+>>] <<<
  [->>+ dupc not [-<<->>] popc <<]<<<<[->>>>>> dupc not [-<<+>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>] <[>+<-]>[-<-<+>>] <<<
  [->>+ dupc not [-<<->>] popc <<]<<<<[->>>>>> dupc not [-<<+>>] popc -<<<<<<]>>>>>>[-<<<<<<+>>>>>>] <[>+<-]>[-<-<+>>] <<<
  [->>+ dupc not [-<<->>] popc <<]<<<<[->>>>>>                        -<<<<<<]>>>>>>[-<<<<<<+>>>>>>] <[-]               <<
}

def muli() [I,I] -> [I] {
  pushi(0)  // [c,i,r]
  rolli3(2) // [i,r,c]
  while(dupi pushi(0) nei) {
    rolli3(2) // [r,c,i]
    dupi      // [r,c,i,i]
    rolli4(3) // [c,i,i,r]
    addi      // [c,i,r]
    rolli3(2) // [i,r,c]
    pushi(1)
    swapi
    subi
  }
  rolli3(2)
  popi
  popi
}


////////////////////////////////////////////////////////////////////////////////
// input / output

def impure inline readc() [C] -> [C] { , }
def impure inline push_read() [] -> [C] { > , }
def impure inline printc_chr() [C] -> [C] { . }
def        inline endl()                  { prints("\n") }

def printc_ord() [C] -> [C] {
  dupc dupc dupc
  pushc(100) swapc divc rollc3(1)
  pushc(100) swapc modc
  pushc( 10) swapc divc swapc
  pushc( 10) swapc modc
  _ploop3
}

def impure printb() [B] -> [B] {
  dupc
  [ [-] prints("true") ]
  popc
  dupc not
  [ [-] prints("false") ]
  popc
}

def impure printi() [I] -> [I] {
  dupi rollc4(3) dupc rollc5(1)
  pushc(127) ltc inc(1)
  if (eqc_(2)) {
    prints("-") clear
    <<<< dec(128) >>>>
           >>>>++>+>++++>+++++++>   ++++>++++++++>    +++>++++++> ++++>++++++++             <<<<<<<<<<<<<
    <[-   >>>>>  > >    >       >       >        >       >      >     >       - _cleann    <<<<<<<<<<<<<<]
    <[-  >>>>>>  > >    >       >       >        >       >    -->----->  ------ _cleann   <<<<<<<<<<<<<<<]
    <[- >>>>>>>  > >    >       >       >  ------>  -----> ----->  --->  ------ _cleann  <<<<<<<<<<<<<<<<]
    <[->>>>>>>>  > >   -> ------>-------> ------->------->    -->    ->  ------ _cleann <<<<<<<<<<<<<<<<<]
    >>>>
  }
  if (eqc_(1)) {
    clear
    <[-   >>>>>>> >      >       >       >       >     >     >     + _cleanp    <<<<<<<<<<<<<<]
    <[-  >>>>>>>> >      >       >       >       >   ++>+++++>++++++ _cleanp   <<<<<<<<<<<<<<<]
    <[- >>>>>>>>> >      >       > ++++++>  +++++>+++++>  +++>++++++ _cleanp  <<<<<<<<<<<<<<<<]
    <[->>>>>>>>>>+>++++++>+++++++>+++++++>+++++++>   ++>    +>++++++ _cleanp <<<<<<<<<<<<<<<<<]
    >>>>
  }
  >>>
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit > _out_digit <<<<]
  >[_out_digit > _out_digit > _out_digit > _out_digit <<<]
  >[_out_digit > _out_digit > _out_digit <<]
  >[_out_digit > _out_digit <]
  >[_out_digit]
  > _out_digit
  <<<<<<<<<<
  popc popc popc popc
  popi
}


////////////////////////////////////////////////////////////////////////////////
// internal helpers

def inline _print_digit() [C] -> [C] { dupc inc('0') printc_chr popc }
def inline _out_digit() [C] -> [C] { inc('0') printc_chr clear }

def impure inline _cleanp() {
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
  gtc_(9) [-<----------<+>>] < rollcn(10,1)
}

def impure inline _cleann() {
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
  gtc_(200) [-<++++++++++<->>] < rollcn(10,1)
}

def impure _ploop3() [C,C,C] -> [] {
  <<[_out_digit > _out_digit <] > [_out_digit] > _out_digit <<<
}
