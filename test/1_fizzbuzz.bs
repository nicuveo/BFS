const C upper_bound = 20

def inline below_upper_bound() [C] -> [C,B] {
    lec_(upper_bound)
}

def can_be_divided_by(C n) [C] -> [C] {
    pushc(n) swapc modc c_to_b not b_to_c
}

def main() {
    pushc(1)
    while (below_upper_bound) {
        dupc
        dupc
        can_be_divided_by(3)
        swapc
        can_be_divided_by(5)
        pushc(2)
        mulc
        addc

        if (eqc_(3)) {
            prints("fizzbuzz!\n")
        }
        if (eqc_(2)) {
            prints("buzz!\n")
        }
        if (eqc_(1)) {
            prints("fizz!\n")
        }
        if (eqc_(0)) {
            swapc
            printc_ord prints("\n")
            swapc
        }

        popc
        inc(1)
    }
    popc
}
